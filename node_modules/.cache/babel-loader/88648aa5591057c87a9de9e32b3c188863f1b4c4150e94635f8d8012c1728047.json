{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0f42f928\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"metamask-container\"\n};\nconst _hoisted_2 = {\n  class: \"spacer\"\n};\nconst _hoisted_3 = {\n  class: \"spacer\"\n};\nconst _hoisted_4 = {\n  class: \"spacer\"\n};\nconst _hoisted_5 = {\n  class: \"spacer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    class: \"action-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.onConnect && $options.onConnect(...args))\n  }, \"CONNECT\"), _createElementVNode(\"button\", {\n    class: \"action-button\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.onSign && $options.onSign(...args))\n  }, \"SIGN\"), _createElementVNode(\"button\", {\n    class: \"action-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.addEthereumChain && $options.addEthereumChain(...args))\n  }, \" ADD POLYGON CHAIN \"), _createElementVNode(\"button\", {\n    class: \"action-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.terminate && $options.terminate(...args))\n  }, \"TERMINATE\"), _createElementVNode(\"div\", _hoisted_2, _toDisplayString($data.connected ? 'CONNECTED' : 'NOT CONNECTED'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createTextVNode(\" Accounts: \"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.accounts, account => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: account\n    }, _toDisplayString(account), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_4, \" ChainId: \" + _toDisplayString($data.chainId), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, \" Last response: \" + _toDisplayString($data.lastResponse), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","onConnect","onSign","addEthereumChain","terminate","_hoisted_2","_toDisplayString","$data","connected","_hoisted_3","_Fragment","_renderList","accounts","account","key","_hoisted_4","chainId","_hoisted_5","lastResponse"],"sources":["/home/gluneau/GitHub/consensys/metamask-sdk-main/packages/examples/vuejs/src/components/MetaMaskComponent.vue"],"sourcesContent":["<template>\n  <div class=\"metamask-container\">\n    <button class=\"action-button\" @click=\"onConnect\">CONNECT</button>\n    <button class=\"action-button\" @click=\"onSign\">SIGN</button>\n    <button class=\"action-button\" @click=\"addEthereumChain\">\n      ADD POLYGON CHAIN\n    </button>\n    <button class=\"action-button\" @click=\"terminate\">TERMINATE</button>\n    <div class=\"spacer\">\n      {{connected ? 'CONNECTED' : 'NOT CONNECTED'}}\n    </div>\n    <div class=\"spacer\">\n      Accounts:\n      <ul>\n        <li v-for='account in accounts' :key='account'>\n          {{account}}\n        </li>\n      </ul>\n    </div>\n    <div class=\"spacer\">\n      ChainId: {{chainId}}\n    </div>\n    <div class=\"spacer\">\n      Last response: {{lastResponse}}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { MetaMaskSDK } from '@metamask/sdk';\nconst { Buffer } = require('buffer');\n\nexport default {\n  name: 'MetaMaskComponent',\n  data() {\n    return {\n      sdk: null,\n      accounts: null,\n      chainId: null,\n      connected: false,\n      lastResponse: null,\n    };\n  },\n  created() {\n    this.sdk = new MetaMaskSDK({\n      dappMetadata: {\n        url: window.location.href,\n        name: 'MetaMask VueJS Example Dapp',\n      },\n      enableDebug: true,\n      autoConnect: {\n        enable: true,\n      },\n      logging: {\n        developerMode: true,\n      },\n      storage: {\n        enabled: true,\n      },\n    });\n  },\n  mounted() {\n    if (this.sdk?.isInitialized()) {\n      // Chain changed\n      window.ethereum?.on(\"chainChanged\", (chain) => {\n        console.log(`App::Chain changed:'`, chain);\n        this.chainId = chain;\n      });\n\n      // Accounts changed\n      window.ethereum?.on(\"accountsChanged\", (accounts) => {\n        console.log(`App::Accounts changed:'`, accounts);\n        this.accounts = accounts;\n      });\n\n      // Initialized event\n      window.ethereum?.on('_initialized', () => {\n        console.debug(`App::useEffect on _initialized`);\n        // Getting the accounts again to display in the UI\n        this.onConnect();\n        if (window.ethereum?.chainId) {\n          this.chainId = window.ethereum.chainId;\n        }\n      });\n\n      // Connected event\n      window.ethereum?.on('connect', (_connectInfo) => {\n        console.log(`App::connect`, _connectInfo);\n        this.connected = true;\n      });\n\n      // Disconnect event\n      window.ethereum?.on('disconnect', (error) => {\n        console.log(`App::disconnect`, error);\n        this.connected = false;\n      });\n    }\n\n  },\n  methods: {\n    async onConnect() {\n      try {\n        const res = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n          params: [],\n        });\n        this.accounts = res;\n        console.log('request accounts', res);\n        this.lastResponse = \"\";\n        this.chainId = window.ethereum.chainId;\n      } catch (e) {\n        console.log('request accounts ERR', e);\n      }\n    },\n    async addEthereumChain() {\n      try {\n        const res = await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [\n            {\n              chainId: '0x89',\n              chainName: 'Polygon',\n              blockExplorerUrls: ['https://polygonscan.com'],\n              nativeCurrency: { symbol: 'MATIC', decimals: 18 },\n              rpcUrls: ['https://polygon-rpc.com/'],\n            },\n          ],\n        });\n        console.log('add', res);\n        this.lastResponse = res;\n      } catch (e) {\n        console.log('ADD ERR', e);\n      }\n    },\n    async onSign() {\n      try {\n        const from = window.ethereum?.selectedAddress;\n        const message = 'Hello World from the Vue Example dapp!';\n        const hexMessage = '0x' + Buffer.from(message, 'utf8').toString('hex');\n\n        const sign = await window.ethereum.request({\n          method: 'personal_sign',\n          params: [hexMessage, from, 'Example password'],\n        });\n        console.log(sign);\n        this.lastResponse = sign;\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    terminate() {\n      this.sdk?.terminate();\n      this.accounts = null;\n      this.lastResponse = \"Terminated!\";\n      this.chainId = null;\n    }\n  },\n};\n</script>\n\n<style scoped>\n.metamask-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 16px;\n}\n\n.action-button {\n  width: 100%;\n  max-width: 400px;\n  margin: 8px 0;\n  padding: 12px;\n  font-size: 16px;\n  text-align: center;\n  border: none;\n  border-radius: 4px;\n  background-color: #4a69bd;\n  color: white;\n  cursor: pointer;\n}\n\n.action-button:hover {\n  background-color: #3c5bb0;\n}\n\n.spacer {\n  height: 16px;\n  margin: 20px;\n}\n\n.deep-link {\n  font-size: 16px;\n  color: #4a69bd;\n  text-decoration: none;\n}\n\n.deep-link:hover {\n  text-decoration: underline;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAoB;;EAOxBA,KAAK,EAAC;AAAQ;;EAGdA,KAAK,EAAC;AAAQ;;EAQdA,KAAK,EAAC;AAAQ;;EAGdA,KAAK,EAAC;AAAQ;;uBArBrBC,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,mBAAA,CAAiE;IAAzDH,KAAK,EAAC,eAAe;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,SAAO,GACxDH,mBAAA,CAA2D;IAAnDH,KAAK,EAAC,eAAe;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,MAAA,IAAAF,QAAA,CAAAE,MAAA,IAAAH,IAAA,CAAM;KAAE,MAAI,GAClDH,mBAAA,CAES;IAFDH,KAAK,EAAC,eAAe;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,gBAAA,IAAAH,QAAA,CAAAG,gBAAA,IAAAJ,IAAA,CAAgB;KAAE,qBAExD,GACAH,mBAAA,CAAmE;IAA3DH,KAAK,EAAC,eAAe;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAI,SAAA,IAAAJ,QAAA,CAAAI,SAAA,IAAAL,IAAA,CAAS;KAAE,WAAS,GAC1DH,mBAAA,CAEM,OAFNS,UAEM,EAAAC,gBAAA,CADFC,KAAA,CAAAC,SAAS,kDAEbZ,mBAAA,CAOM,OAPNa,UAOM,G,iBAPc,aAElB,GAAAb,mBAAA,CAIK,c,kBAHHF,mBAAA,CAEKgB,SAAA,QAAAC,WAAA,CAFiBJ,KAAA,CAAAK,QAAQ,EAAnBC,OAAO;yBAAlBnB,mBAAA,CAEK;MAF4BoB,GAAG,EAAED;IAAO,GAAAP,gBAAA,CACzCO,OAAO;sCAIfjB,mBAAA,CAEM,OAFNmB,UAEM,EAFc,YACT,GAAAT,gBAAA,CAAEC,KAAA,CAAAS,OAAO,kBAEpBpB,mBAAA,CAEM,OAFNqB,UAEM,EAFc,kBACH,GAAAX,gBAAA,CAAEC,KAAA,CAAAW,YAAY,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}